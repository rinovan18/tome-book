ABOUT LUNR
==================

Lunr provides integration between Lunr.js and Drupal.

INSTALLATION
============

Lunr depends on the Serialization and Views modules, which are both in core.

USE
===

Lunr uses Views to pre-build a search index and pages of search results, which
are delivered as needed to clients using JS.

If the Node module is enabled before Lunr, a default Lunr search entity will be
created. In this case, you can start using Lunr right away by visiting
/admin/config/lunr_search/default/index, clicking "Index", then visiting the
search at /search.

To create a new Lunr search index/page, follow these steps:

1. Visit /admin/structure/views/add and create a new view.
2. Add a "Lunr search index" display to the view.
3. Add the fields you'd like to use in indexing, and a field for what will be
displayed in search results. Note that to best support indexing, you should
strip HTML tags from fields by expanding "Rewrite results" and checking
"Strip HTML tags".
4. Save the view when finished, then visit /admin/config/lunr_search/add
5. Fill out "Label", "Path", and select your new view.
6. Under "Index fields", enter the fields and boost values you want to use. For
example:

title|2
body|1

Would index the "title" and "body" fields from the view, giving a boost to the
"title" field.
7. Under "Display field", enter a field to be displayed in search results.
8. Save the form.
9. Under "Operations" for your search, expand the dropdown and select "Index".
10. Click "Index" and wait for the process to complete.
11. Visit the path you configured for this view.

You can also index on the command line by running:

node js/index.node.js LUNR_SEARCH_ID

For example:

node js/index.node.js default

Drush is required for the script to function. If you want to provide an
alternative drush executable path, set the LUNR_DRUSH environmental variable.

FACETS / SEARCHING ON ONE FIELD
===============================

If you want to replicate a facet-like experience with Lunr, you can implement
"hook_lunr_search_page_alter" to add a custom input element which allows users
to search by a specific field. This input element must render inside the form,
and have the attribute "data-lunr-search-field" with the value of the field
name your input is for.

Alternatively, you can add an input element with JavaScript with the same data
attribute, or add your field search directly as a query string with a path like
"/search?my_field=my_value". An input element is not required for query string
field searching to work.

If you want support multiple values for a field, you can add checkboxes for
each possible value, or separate the values by a space in a textfield/query
parameter. By default multiple values are combined using AND, but you can make
them optional by defining the "lunrOperators" drupalSetting:

$build['drupalSettings']['lunrOperators'] = [
  'field_my_field' => 'OR',
];

To auto-submit the form when a facet's value has changed, add the
"data-lunr-auto-submit" attribute to the input tag.

For a working example of facets, you can enable the "lunr_facet_example"
module, then index and use the "Facet search example" lunr search.

DEPLOYMENT
==========

To use Lunr with a static Drupal site, include the public://lunr_search
directory in your deployment.

If you're using Tome, these files are already included.

SECURITY
========

The permission required to access search pages is "access content", and the
static JSON generated by this module is implicitly accessible to anonymous
users. With that in mind, ensure that only content you want to be made public
is indexed.
